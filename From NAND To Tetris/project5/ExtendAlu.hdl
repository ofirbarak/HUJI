/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
    PARTS:
	Mul (a=x, b=y, out=mul);
	ShiftRight (in=y, out=shiftRightY);
	ShiftLeft (in=y, out=shiftLeftY);
	ShiftRight (in=x, out=shiftRightX);
	ShiftLeft (in=x, out=shiftLeftX);
		
	Mux4Way16 (a=shiftRightY, b=shiftRightX, c=shiftLeftY, d=shiftLeftX, sel[0]=instruction[4], sel[1]=instruction[5], out=muxout);
	ALU (x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluOut);
	
	Mux16 (a=mul, b=aluOut, sel=instruction[7], out=mux1out);
	Mux16 (a=muxout, b=mux1out, sel=instruction[8], out=out, out[0..7]=lsb, out[8..15]=msb, out[15]=mmsb);
	
	// zr
    Or8Way (in=lsb, out=out0to7);
    Or8Way (in=msb, out=out8to15);
    Or (a=out0to7, b=out8to15, out=orAll);
    Mux (a=true, b=false, sel=orAll, out=zr);
    // ng
    Mux (a=false, b=true, sel=mmsb, out=ng);
}
