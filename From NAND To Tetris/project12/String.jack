// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field int length;
	field int maxStringLength;
	field Array string;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {		
        let length = 0;
		let maxStringLength = maxLength;
        if (~(maxLength > 0)){
            let maxStringLength = 1;
        }
		let string = Array.new(maxStringLength);
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do string.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if(length < maxStringLength){
			let string[length] = c;
			let length = length + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
    		let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNegative;
		var int counter, integerValue;
		let counter = 0;
		let integerValue = 0;
        let isNegative = false;        
        if (string[0] = 45){
            let isNegative = true;
            let counter = 1;
        }
		while((counter < length) & (string[counter] > 47) & (string[counter] < 58)){
			let integerValue = integerValue * 10 + string[counter]-48;
			let counter = counter + 1;
		}
        if (isNegative){
    		return -integerValue;
        }
        return integerValue;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		do string.dispose();
        let string = Array.new(maxStringLength);
        let length = 0;
		if(val < 0){
			do appendChar(45);
		}
		let val = Math.abs(val);
		do setIntRecursion(val);
        return;
    }
	
	method void setIntRecursion(int val){
		if(val < 10){
			do appendChar(val + 48);
			return;
		}
		do setIntRecursion(Math.divide(val,10));
		do appendChar(Math.mod(val,10) + 48);
        return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
